import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import './customer.dart';

class DatabaseHelper{


  static final _dbName = 'CustomerDatabase.db';
  static final _dbVersion = 1;
//  static final _tableName = 'myTable';
//  static final columnId = '_id';
//  static final columnNa me = 'name';

  DatabaseHelper._();
  static final DatabaseHelper instance = DatabaseHelper._();


  static Database _database;

  Future<Database> get database async{
    if(_database!=null) return _database;

    _database = await _initiateDatabase();
    return _database;
  }

  _initiateDatabase() async{

    String directory = await getDatabasesPath();
    String path = join(directory,_dbName);

    return await openDatabase(path,version: _dbVersion,onCreate: _onCreate);

  }

  Future _onCreate(Database db, int version ) async{

    await db.execute(
      '''
      CREATE TABLE ${Customer.tblCustomer}(
      ${Customer.colId} INTEGER PRIMARY KEY AUTOINCREMENT ,
      ${Customer.colName} TEXT NOT NULL,
      ${Customer.colCrateSmall} INTEGER,
      ${Customer.colCrateMedium} INTEGER,
      ${Customer.colCrateMarked} INTEGER
      )
      '''
    );
  }


  //id autogenerated that's why future is of type <int>
  Future<int> insert(Customer customer) async{
    Database db =  await database;
    return await db.insert(Customer.tblCustomer, customer.toMap());

}

Future<List<Customer>> queryAll() async{
  Database db =  await database;

  List<Map> customers = await db.query(Customer.tblCustomer);
  return customers.length == 0 ? [] : customers.map((x) => Customer.fromMap(x)).toList();

}


Future<int> update(Customer customer) async{
  Database db =  await database;
 return await db.update(Customer.tblCustomer, customer.toMap(),
 where: '${Customer.colId}=?',whereArgs: [customer.id]);

}
//
//  Future<int> updateCrates(Customer customer) async{
//    Database db =  await database;
////    var c = customer.toMap();
////    var z =c[Customer.colCrate];
//    //print('z in db = $z');
//
//    //print(c);
//    return await db.rawUpdate(
//        '''
//        UPDATE customer
//        SET crate = ${customer.crateCount}
//        WHERE id = ${customer.id}
//        ''',
//      //[25,'FAIZ']
//    );
//
//  }


Future<int> delete(int id) async{

  Database db =  await database;
   return await db.delete(Customer.tblCustomer,where: '${Customer.colId}=?',
   whereArgs: [id]);
}






}